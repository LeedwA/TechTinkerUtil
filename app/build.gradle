apply plugin: 'com.android.application'


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://jitpack.io" }

    }
}
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "tinker.ecar.com.ecartinkerutil"
        minSdkVersion 11
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        debug {
            v2SigningEnabled false
            storeFile file('buildsystem/YCDEVELOP.jks')
            storePassword "123456"
            keyAlias "test"
            keyPassword "123456"
        }
        release {
            v2SigningEnabled false
            storeFile file('buildsystem/YCDEVELOP.jks')
            storePassword "123456"
            keyAlias "test"
            keyPassword "123456"
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:25.1.1'
    compile project(':ecartinker')
}

//腾讯热更新


def bakPath = file("${buildDir}/bakApk/")

ext {
    tinkerEnabled = true

    //这个是你出现bug的apk完整名称，app/build/bakApk目录下
    tinkerOldApkPath = "${bakPath}/tinker.ecar.com.ecartinkerutil_20170308_201109/" +
            "app-debug.apk"
    //混淆差分文件
    tinkerApplyMappingPath = "${bakPath}/" +
            ""
    //如果你修复了res文件，需要指定你bug版本的R.txt文件
    tinkerApplyResourcePath = "${bakPath}/tinker.ecar.com.ecartinkerutil_20170308_201109/" +
            "tinker.ecar.com.ecartinkerutil_20170308_201109-R.txt"

}


def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}


if (ext.tinkerEnabled) {
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        oldApk = getOldApkPath()
        ignoreWarning = true
        useSign = true
        buildConfig {
            applyMapping = getApplyMappingPath()
            applyResourceMapping = getApplyResourceMappingPath()
            tinkerId = "1.0"
        }

        dex {
            dexMode = "jar"
//            usePreGeneratedPatchDex = false
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            loader = ["com.tencent.tinker.loader.*",
                      "tinker.ecar.com.ecartinkerutil.mAppLike"   //自己的appLike路径
            ]
        }

        lib {
            pattern = ["lib/armeabi/*.so"]
        }

        res {
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
            ignoreChange = ["assets/sample_meta.txt"]
            largeModSize = 100
        }

        packageConfig {
            configField("patchMessage", "tinker is sample to use")
            configField("platform", "all")
            configField("patchVersion", "1.0")
        }
        sevenZip {
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
        }
    }

    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    android.applicationVariants.all { variant ->
        def taskName = variant.name
        def date = new Date().format("yyyyMMdd_HHmmss")

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
//                        def fileNamePrefix = "${project.name}"
                        def fileNamePrefix = "${applicationId}"

                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}_${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${applicationId}_${date}/${variant.flavorName}") :
                                 file("${bakPath}/${applicationId}_${date}")
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
}
